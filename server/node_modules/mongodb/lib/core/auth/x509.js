'use strict';
<<<<<<< HEAD
const AuthProvider = require('./auth_provider').AuthProvider;

class X509 extends AuthProvider {
  prepare(handshakeDoc, authContext, callback) {
    const credentials = authContext.credentials;
    Object.assign(handshakeDoc, {
      speculativeAuthenticate: x509AuthenticateCommand(credentials)
    });

    callback(undefined, handshakeDoc);
  }

  auth(authContext, callback) {
    const connection = authContext.connection;
    const credentials = authContext.credentials;
    const response = authContext.response;
    if (response.speculativeAuthenticate) {
      return callback();
    }

    connection.command('$external.$cmd', x509AuthenticateCommand(credentials), callback);
  }
}

function x509AuthenticateCommand(credentials) {
  const command = { authenticate: 1, mechanism: 'MONGODB-X509' };
  if (credentials.username) {
    Object.assign(command, { user: credentials.username });
  }

  return command;
}

=======

const AuthProvider = require('./auth_provider').AuthProvider;

/**
 * Creates a new X509 authentication mechanism
 * @class
 * @extends AuthProvider
 */
class X509 extends AuthProvider {
  /**
   * Implementation of authentication for a single connection
   * @override
   */
  _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {
    const username = credentials.username;
    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };
    if (username) {
      command.user = username;
    }

    sendAuthCommand(connection, '$external.$cmd', command, callback);
  }
}

>>>>>>> 294d75090c0670d1606c5984e2bdb3ac5fc7c2c2
module.exports = X509;
